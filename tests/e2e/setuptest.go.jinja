package e2e

import (
	"log"
	"net/http/httptest"
	"os"
	"testing"

	"github.com/mdobak/go-xerrors"
	"github.com/playwright-community/playwright-go"
)

var (
	expect    playwright.PlaywrightAssertions
	browser   playwright.Browser
	webappURL = os.Getenv("{{service_prefix}}_PLAYWRIGHT_URL")
)

func TestMain(m *testing.M) {
	pw, server, err := beforeAll()
	if err != nil {
		log.Fatalf("could not start server: %v", err)
	}

	code := m.Run()
	afterAll(pw, server)
	os.Exit(code)
}

func beforeAll() (*playwright.Playwright, *httptest.Server, error) {
	var err error
	pw, err := playwright.Run()
	if err != nil {
		log.Fatalf("could not start Playwright: %v", err)
	}

	browserName, hasEnv := os.LookupEnv("BROWSER")
	if !hasEnv {
		browserName = "chromium"
	}

	var browserType playwright.BrowserType

	switch browserName {
	case "chromium":
		browserType = pw.Chromium
	case "firefox":
		browserType = pw.Firefox
	case "webkit":
		browserType = pw.WebKit
	default:
		browserType = pw.Chromium
	}

	headless := os.Getenv("{{service_prefix}}_PLAYWRIGHT_HEADLESS") == ""
	browser, err = browserType.Launch(playwright.BrowserTypeLaunchOptions{
		Headless: playwright.Bool(headless),
	})
	if err != nil {
		return &playwright.Playwright{}, nil, xerrors.New("could not start browser: %v", err)
	}

	expect = playwright.NewPlaywrightAssertions(1000)

	// INFO: if no address passed start local server
	var server *httptest.Server
	if webappURL == "" {
	}

	return pw, server, nil
}

func afterAll(pw *playwright.Playwright, server *httptest.Server) {
	if server != nil {
		server.Close()
	}

	if err := pw.Stop(); err != nil {
		log.Fatalf("could not stop Playwright: %v", err)
	}
}

func setupTest() (playwright.Page, func(page playwright.Page) error) {
  context, err := browser.NewContext(playwright.BrowserNewContextOptions{
    RecordVideo: &playwright.RecordVideo{
      Dir: "videos/",
    },
    Permissions: []string{"clipboard-read", "clipboard-write"},
  })

  if err != nil {
    log.Fatalf("could not create a new browser context: %v", err)
  }
  page, err := context.NewPage()
  if err != nil {
    log.Fatalf("could not create page: %v", err)
  }

  _, err = page.Goto(webappURL)
  if err != nil {
    log.Fatalf("could not go to page: %v", err)
  }


	return page, func(page playwright.Page) error {
    err := page.Close()
    return err
	}
}
