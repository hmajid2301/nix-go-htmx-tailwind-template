package config

import (
	"context"
	"fmt"
	"log/slog"
	"net"
	"time"

	"github.com/invopop/ctxi18n/i18n"
	"github.com/sethvargo/go-envconfig"
)

// INFO: we need another struct for actual config values once we've passed the input ones
type Config struct {
	DB      Database
	Server  Server
	Redis   Redis
	App     App
	JWT     JWT
}

type Database struct {
	URI string
}

type Server struct {
	Host string
	Port int
}

type Redis struct {
	Address string
}

type JWT struct {
	JWKSURL    string
	AdminGroup string
}

type App struct {
	Environment   string
	LogLevel      slog.Level
	DefaultLocale i18n.Code
	Retries       int
	BaseDelay     time.Duration
}

type ConfigIn struct {
	DBUsername string `env:"{{service_prefix}}_DB_USERNAME"`
	DBPassword string `env:"{{service_prefix}}_DB_PASSWORD"`
	DBHost     string `env:"{{service_prefix}}_DB_HOST"`
	DBPort     string `env:"{{service_prefix}}_DB_PORT, default=5432"`
	DBName     string `env:"{{service_prefix}}_DB_NAME, default={{project_slug}}"`

	RedisAddress string `env:"{{service_prefix}}_REDIS_ADDRESS"`

	Retries   int `env:"{{service_prefix}}_RETRIES, default=3"`
	BaseDelay int `env:"{{service_prefix}}_BASE_DELAY_IN_MS, default=100"`

	Environment   string `env:"{{service_prefix}}_ENVIRONMENT, default=production"`
	LogLevel      string `env:"{{service_prefix}}_LOG_LEVEL, default=info"`
	Host          string `env:"{{service_prefix}}_WEBSERVER_HOST, default=0.0.0.0"`
	Port          int    `env:"{{service_prefix}}_WEBSERVER_PORT, default=8080"`
	DefaultLocale string `env:"{{service_prefix}}_DEFAULT_LOCALE, default=en-GB"`

	JWKSURL    string `env:"{{service_prefix}}_JWKS_URL"`
	AdminGroup string `env:"{{service_prefix}}_JWT_ADMIN_GROUP"`
}

func LoadConfig(ctx context.Context) (Config, error) {
	var input ConfigIn
	if err := envconfig.Process(ctx, &input); err != nil {
		return Config{}, err
	}

	err := validateServerConfig(input)
	if err != nil {
		return Config{}, err
	}

	uri := fmt.Sprintf(
		"postgresql://%s:%s@%s:%s/%s",
		input.DBUsername,
		input.DBPassword,
		input.DBHost,
		input.DBPort,
		input.DBName,
	)

	config := Config{
		DB: Database{
			URI: uri,
		},
		Server: Server{
			Host: input.Host,
			Port: input.Port,
		},
		Redis: Redis{
			Address: input.RedisAddress,
		},
		JWT: JWT{
			JWKSURL:    input.JWKSURL,
			AdminGroup: input.AdminGroup,
		},
		App: App{
			Environment:   input.Environment,
			LogLevel:      parseLogLevel(input.LogLevel),
			DefaultLocale: i18n.Code(input.DefaultLocale),
			BaseDelay:     time.Millisecond * time.Duration(input.BaseDelay),
			Retries:       input.Retries,
		},
	}

	return config, nil
}

func validateServerConfig(cfg ConfigIn) error {
	if cfg.Port < 1 || cfg.Port > 65535 {
		return fmt.Errorf("expected port to be between 1 and 65535 but received: %d", cfg.Port)
	}

	hostIp := net.ParseIP(cfg.Host)
	if hostIp == nil {
		return fmt.Errorf("expected valid IPv4 address but received: %v", hostIp)
	}

	return nil
}

func parseLogLevel(logLevel string) slog.Level {
	switch logLevel {
	case "debug":
		return slog.LevelDebug
	case "info":
		return slog.LevelInfo
	case "warn":
		return slog.LevelWarn
	case "error":
		return slog.LevelError
	default:
		return slog.LevelInfo
	}
}
